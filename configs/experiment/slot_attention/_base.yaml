# @package _global_
# Default parameters for slot attention.
defaults:
  - /experiment/_output_path
  - /training_config
  - /feature_extractor/slot_attention@models.feature_extractor
  - /conditioning/random@models.conditioning
  - /perceptual_grouping/slot_attention@models.perceptual_grouping
  - /plugins/optimization@plugins.optimize_parameters
  - /optimizers/adam@plugins.optimize_parameters.optimizer
  - /lr_schedulers/exponential_decay@plugins.optimize_parameters.lr_scheduler
  - _self_

models:
  conditioning:
    object_dim: 64

  perceptual_grouping:
    feature_dim: 64
    object_dim: ${..conditioning.object_dim}
    kvq_dim: 128
    positional_embedding:
      _target_: ocl.neural_networks.wrappers.Sequential
      _args_:
        - _target_: ocl.neural_networks.positional_embedding.SoftPositionEmbed
          n_spatial_dims: 2
          feature_dim: 64
        - _target_: ocl.neural_networks.build_two_layer_mlp
          input_dim: 64
          output_dim: 64
          hidden_dim: 128
          initial_layer_norm: true
          residual: false
    ff_mlp:
      _target_: ocl.neural_networks.build_two_layer_mlp
      input_dim: 64
      output_dim: 64
      hidden_dim: 128
      initial_layer_norm: true
      residual: true

  object_decoder:
    _target_: ocl.decoding.SlotAttentionDecoder
    object_features_path: perceptual_grouping.objects
    decoder:
      _target_: ocl.decoding.get_slotattention_decoder_backbone
      object_dim: ${models.perceptual_grouping.object_dim}
    positional_embedding:
      _target_: ocl.neural_networks.positional_embedding.SoftPositionEmbed
      n_spatial_dims: 2
      feature_dim: ${models.perceptual_grouping.object_dim}
      cnn_channel_order: true

plugins:
  optimize_parameters:
    optimizer:
      lr: 0.0004
    lr_scheduler:
      decay_rate: 0.5
      decay_steps: 100000
      warmup_steps: 10000

losses:
  mse:
    _target_: ocl.losses.ReconstructionLoss
    loss_type: mse_sum
    input_path: object_decoder.reconstruction
    target_path: input.image

visualizations:
  input:
    _target_: ocl.visualizations.Image
    denormalization: "${lambda_fn:'lambda t: t * 0.5 + 0.5'}"
    image_path: input.image
  reconstruction:
    _target_: ocl.visualizations.Image
    denormalization: ${..input.denormalization}
    image_path: object_decoder.reconstruction
  objects:
    _target_: ocl.visualizations.VisualObject
    denormalization: ${..input.denormalization}
    object_path: object_decoder.object_reconstructions
    mask_path: object_decoder.masks
  pred_segmentation:
    _target_: ocl.visualizations.Segmentation
    denormalization: ${..input.denormalization}
    image_path: input.image
    mask_path: object_decoder.masks
